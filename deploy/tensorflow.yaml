apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: tensorflow
  namespace: ml
  labels:
    app: tensorflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tensorflow
  template:
    metadata:
      labels:
        app: tensorflow
        driver: nvidia-gpu
    spec:
      volumes:
        - name: auth-proxy-config
          secret:
            secretName: auth-proxy-config
        - name: jupyter-config
          configMap:
            name: jupyter-config
        - name: data
          persistentVolumeClaim:
            claimName: 2354cd00-bc3b-4439-b436-b9b089425b4a
      containers:
      - name: auth-proxy
        image: registry.uninett.no/public/goidc-proxy:latest
        imagePullPolicy: Always
        ports:
          - containerPort: 80
        volumeMounts:
          - name: auth-proxy-config
            mountPath: /conf
        workingDir: /conf
      - name: tensorflow
        image: gcr.io/tensorflow/tensorflow:1.2.0-gpu
        imagePullPolicy: Always
        resources:
          requests:
            alpha.kubernetes.io/nvidia-gpu: 1
            cpu: 2048m
            memory: 8Gi
          limits:
            alpha.kubernetes.io/nvidia-gpu: 1
            cpu: 4096m
            memory: 12Gi
        volumeMounts:
          - name: jupyter-config
            mountPath: /root/.jupyter
          - name: data
            mountPath: /data:rslave
        ports:
          - containerPort: 8888

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jupyter-config
  namespace: ml
data:
  jupyter_notebook_config.py:  |-
    # Configuration file for ipython-notebook.
    c = get_config()

    # ------------------------------------------------------------------------------
    # NotebookApp configuration
    # ------------------------------------------------------------------------------
    c.IPKernelApp.pylab = 'inline'
    c.NotebookApp.ip = 'localhost'
    c.NotebookApp.open_browser = False
    c.NotebookApp.port = 8888
    c.NotebookApp.base_url = '/'
    c.NotebookApp.trust_xheaders = True
    c.NotebookApp.tornado_settings = {'static_url_prefix': '/static/'}
    c.NotebookApp.notebook_dir = '/data'
    c.NotebookApp.allow_origin = '*'
    c.NotebookApp.token = ''
    c.NotebookApp.password = ''

---
apiVersion: v1
kind: Secret
metadata:
  name: auth-proxy-config
  namespace: ml
type: Opaque
data:
  goidc.json: {
    "proxy": {
      "target": "http://localhost:8888",
      "insecure_skip_verify": false,
      "share_target": ""
    },
    "engine": {
      "client_id": "xxxxxxxx-xxx-xxx-xxx",
      "client_secret": "xxx-xx-x-x-xx",
      "issuer_url": "https://auth.dataporten.no",
      "redirect_url": "https://tf.ml.ioudaas.no/oauth2/callback",
      "scopes": "userid,groups",
      "signkey": "asdlkjaslkdj23elahd",
      "groups_endpoint": "https://groups-api.dataporten.no/groups/me/groups",
      "token_type": "oauth2",
      "jwt_token_issuer": "",
      "authorized_principals": "",
      "xhr_endpoints": "",
      "twofactor": {
        "all": false,
        "rediect_on_response": false,
        "principals": "",
        "acr_values": ""
      },
      "logging": {
        "level": "info"
      }
    },
    "server": {
      "port": 80,
      "health_port": 1337,
      "cert": "cert.pem",
      "key": "key.pem",
      "readtimeout": 10,
      "writetimeout": 20,
      "idletimeout": 120,
      "ssl": false,
      "secure_cookie": false
    }
  }

---
kind: Service
apiVersion: v1
metadata:
  namespace: ml
  labels:
    app: tensorflow
  name: tensorflow
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: tensorflow

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: ml
  name: tensorflow
  annotations:
    kubernetes.io/tls-acme: "true"
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
  - hosts:
    - tf.ml.ioudaas.no
    secretName: tensorflow-tls
  rules:
  - host: tf.ml.ioudaas.no
    http:
      paths:
      - path: /
        backend:
          serviceName: tensorflow
          servicePort: 80

---
apiVersion: extensions/v1beta1
kind: NetworkPolicy
metadata:
  namespace: ml
  name: tensorflow
spec:
  podSelector:
    matchLabels:
      app: tensorflow
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: kube-ingress
      ports:
        - protocol: TCP
          port: 80